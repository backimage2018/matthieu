<?php
namespace App\Controller;

use App\Form\ProductsType;
use App\Entity\Products;
use App\Entity\Review;
use App\Repository\ProductsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\Entity\Image;

class ProductsController extends Controller
{

    /**
     * @var ProductsRepository $productsRepository
     */
    private $productsRepository;

    /**
     * @param ProductsRepository $productsRepository
     */
    public function __construct(ProductsRepository $productsRepository)
    {
        $this->productsRepository = $productsRepository;
    }


    /**
     * @Route("/admin/products/{id}", name="admin_products_load", requirements={"id" = "\d+"})
     */
    public function loadProducts(Request $request, $id)
    {
        $param = [];

        $products = $this->getDoctrine()->getRepository(Products::class)->find($id);

        $filename = $products->getImage()->getUrl();
        $products->getImage()->setUrlName($filename);
        
        $file = new File($this->getParameter('upload_directory').'/'.$filename);
            
        $products->getImage()->setUrl($file);
        
        $param['image'] = $products->getImage()->getUrl()->getFileName();
        $param["products"] = $products;
        
        $form = $this->createForm(ProductsType::class, $products);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            
            $file = $products->getImage()->getUrl();
            $filename = $file->getClientOriginalName();

            $file->move($this->getParameter('upload_directory'), $filename);
            $products->getImage()->setUrl($filename);
            
            $em = $this->getDoctrine()->getManager();
            $em->persist($products);
            $em->flush();
            return $this->redirectToRoute('admin_products_load', ['id' => $id]);
        }
        $param["form"] = $form->createView();
        $param["listeProduits"] = null;
        return $this->render("admin/products.html.twig", $param);
    }
    /**
     * @Route("/admin/products/new", name="admin_products")
     */
    public function registerProducts(Request $request)
    {
        $products = new Products();
        $imageobj = new Image();
        $form = $this->createForm(ProductsType::class, $products);

        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            
            $file = $products->getImage()->getUrl();
            $filename = $file->getClientOriginalName();
            $file->move($this->getParameter('upload_directory'), $filename);
            $products->getImage()->setUrl($filename);
            
            $em = $this->getDoctrine()->getManager();
            $em->persist($products);
            $em->flush();
            return $this->redirectToRoute('admin_products');
        }
        return $this->render('admin/products.html.twig', ['form' => $form->createView()]);
    }

    /**
     * @Route("/admin/products-delete/{id}", name="admin_products_delete", requirements={"id" = "\d+"})
     */
    public function deleteProducts(Request $request, $id)
    {
        $product = $this->getDoctrine()
            ->getRepository(Products::class)
            ->find($id);
        $em = $this->getDoctrine()->getManagerForClass(Products::class);
        $em->remove($product);
        $em->flush();
        return new Response("Deleted");
    }

    /**
     * @Route("/product-page/{id}", name="product_page" ,requirements = {"id" = "\d+"})
     */
    function productPage(Request $request, $id)
    {
        $produit = $this->getDoctrine()
            ->getRepository(Products::class)
            ->find($id);
        
        return $this->render('product-page.html.twig', [
            'produit' => $produit,
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome),
            'topLinks' => json_decode(Data::topLinks)
        ]);
    }

    /**
     *
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/product-page/{id}/review/add", name="add_review",requirements = {"id" = "\d+"})
     */
    function addReview(Request $request, $id)
    {
        
        $rep = $this->getDoctrine()->getRepository(Products::class);
        $user = $this->getUser();
        $products = $rep->find($id);
        
        
        $review = new Review();
        $review->setUser($user);
        
        
        $message = $request->request->get('message');
        $review->setMessage($message);
        
        $products->getReviews()[] = $review;
        $review->setProducts($products);
        
        $em = $this->getDoctrine()->getManager();
        $em->persist($products);
        $em->flush();
        //return new Response('coucou');
        return $this->redirectToRoute('product_page', ['id' => $id]);
    }
     
    /**
     * @Route("/products", name="products")
     */
    
    function products() {
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAll();
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/men", name="men")
     */
    function productsForMen() {
        
        $men = 'men';
        $mixte = 'mixte';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsForMen($men, $mixte);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/women", name="women")
     */
    function productsForWomen() {
        $women = 'women';
        $mixte = 'mixte';        
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsForWomen($women, $mixte);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/women/cloth", name="women_cloth")
     */
    function productsForWomenCloth() {
        $women = 'women';
        $cloth = 'cloth';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsWomenCloth($women, $cloth);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/men/cloth", name="men_cloth")
     */
    function productsForMenCloth() {
        
        $men = 'men';
        $cloth = 'cloth';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsMenCloth($men, $cloth);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/phones-accessories", name="phones_accessories")
     */
    function productsForPhoneAndAccessorie() {
        
        $phone = 'phone';
        $accessorie = 'accessorie';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsMenCloth($phone, $accessorie);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/consumer-office", name="consumer_office")
     */
    function productsForConsumerAndOffice() {
        
        $consumer = 'consumer';
        $office = 'office';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsConsumerAndOffice($consumer, $office);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/consumer-electronic", name="consumer_electronic")
     */
    function productsForConsumerAndElectronic() {
        
        $consumer = 'consumer';
        $electronic = 'electronic';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsConsumerElectronic($consumer, $electronic);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/jewelry-watche", name="jewelry_watche")
     */
    function productsForJewelryAndWatche() {
        
        $jewelry = 'jewelry';
        $watche = 'watche';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsConsumerElectronic($jewelry, $watche);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
    /**
     * @Route("/products/bags-shoes", name="bags_shoes")
     */
    function productsForBagsAndShoes() {
        
        $bags = 'bags';
        $shoes = 'shoes';
        $listeProduits = $this-> getDoctrine()
        -> getRepository(Products::class)
        -> findAllProductsBagsAndShoes($bags, $shoes);
        
        return $this->render('products.html.twig', [
            'listeProduits' => $listeProduits,
            'topLinks' => json_decode(Data::topLinks),
            'langues' => json_decode(Data::langues),
            'moneys' => json_decode(Data::moneys),
            'categorieSearchs' => json_decode(Data::categorieSearchs),
            'categorieListes' => json_decode(Data::categorieListes),
            'categorieSocials' => json_decode(Data::categorieSocials),
            'myAccounts' => json_decode(Data::myAccounts),
            'footerServices' => json_decode(Data::footerServices),
            'welcome' => json_decode(Data::welcome)
        ]);
    }
    
}



